Se trabaja con los conceptos:

* Llamada a un constructor interno: en la clase snack (la cual siempre debe ser la primera linea del constructor que lo llama.

* Uso de bloque estático para inicializar un elemento estático: (Bloque de tipo estático inicalizador): en la clase Snacks, ya que como en esta clase se va a trabajar solo con métodos estáticos y la lista que se usa tambien se la creo como un elemento estático no se usa constructor, y por esto para inicializarlos se utiliza un bloque estático.

Como se dijo para iniciar elementos estáticos en vez de usar un constructor se usa un bloque estático inicializador, que cuando se cargue la clase se van a crear las elementos estáticos y se van a inicializar al ejecutar este bloque estático.
Para hacer se coloca la palabra static y se pone las llaves para indicar el bloque. Luego se trabaja como si fuera un constructor.
Se usa para inicializar y hacer todo lo que tenga que ver con el contexto estático.
Al estar en el bloque estático a los atributos no es necesario indicar el nombre, de la clase como si o tendríamos que hacer en otra circuntancia.
Es decir por ejemplo usamos solo snack (para el atributo llamado así), en lugar de Snacks.snacks.


La clase java.io.File

 en Java es una herramienta fundamental para interactuar con el sistema de archivos. Permite crear, eliminar, renombrar y obtener información sobre archivos y directorios. A continuación, te explico detalladamente cómo utilizarla, con ejemplos prácticos:
1. Creación de un objeto File:
Un objeto File representa una ruta de acceso a un archivo o directorio en el sistema de archivos.
Para crear un objeto File, puedes proporcionar la ruta como una cadena:

Java


import java.io.File;

public class EjemploFile {
    public static void main(String[] args) {
        File archivo = new File("mi_archivo.txt");
        File directorio = new File("mi_directorio");
    }
}


También puedes combinar rutas de directorios y nombres de archivos:

Java


File directorioPadre = new File("documentos");
File archivoHijo = new File(directorioPadre, "reporte.txt");


2. Verificación de existencia:
El método exists() verifica si el archivo o directorio representado por el objeto File existe:

Java


if (archivo.exists()) {
    System.out.println("El archivo existe.");
} else {
    System.out.println("El archivo no existe.");
}


3. Creación de archivos y directorios:
El método createNewFile() crea un nuevo archivo vacío:

Java


try {
    if (archivo.createNewFile()) {
        System.out.println("Archivo creado.");
    } else {
        System.out.println("El archivo ya existe.");
    }
} catch (java.io.IOException e) {
    e.printStackTrace();
}


El método mkdir() crea un nuevo directorio:

Java


if (directorio.mkdir()) {
    System.out.println("Directorio creado.");
} else {
    System.out.println("No se pudo crear el directorio.");
}


El método mkdirs() crea un nuevo directorio, y todos los directorios padres que hagan falta para completar la ruta especificada.

Java


File directorioAnidado = new File("padre/hijo/nieto");
if (directorioAnidado.mkdirs()) {
    System.out.println("Directorios creados.");
} else {
    System.out.println("No se pudieron crear los directorios.");
}


4. Eliminación de archivos y directorios:
El método delete() elimina el archivo o directorio:

Java


if (archivo.delete()) {
    System.out.println("Archivo eliminado.");
} else {
    System.out.println("No se pudo eliminar el archivo.");
}


Para eliminar un directorio, este debe estar vacío. Si el directorio contiene archivos o subdirectorios, la operación delete() fallará.
5. Renombrado de archivos y directorios:
El método renameTo() cambia el nombre del archivo o directorio:

Java


File nuevoArchivo = new File("nuevo_nombre.txt");
if (archivo.renameTo(nuevoArchivo)) {
    System.out.println("Archivo renombrado.");
} else {
    System.out.println("No se pudo renombrar el archivo.");
}


6. Obtención de información:
getName(): Obtiene el nombre del archivo o directorio.
getAbsolutePath(): Obtiene la ruta absoluta.
length(): Obtiene el tamaño del archivo en bytes.
isDirectory(): Verifica si es un directorio.
isFile(): Verifica si es un archivo.
lastModified(): Obtiene la última fecha de modificación.
list(): Obtiene un array de Strings con los nombres de los archivos y directorios que se encuentran dentro de un directorio.
listFiles(): Obtiene un array de objetos File con los archivos y directorios que se encuentran dentro de un directorio.
Ejemplo completo:

Java


import java.io.File;
import java.io.IOException;

public class EjemploFileCompleto {
    public static void main(String[] args) {
        File archivo = new File("datos.txt");
        try {
            if (archivo.createNewFile()) {
                System.out.println("Archivo creado: " + archivo.getAbsolutePath());
                System.out.println("Tamaño: " + archivo.length() + " bytes");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        File directorio = new File("./test");
        directorio.mkdir();
        File[] archivos = directorio.listFiles();
        if (archivos != null){
            for (File archivoEnDirectorio: archivos){
                System.out.println(archivoEnDirectorio.getName());
            }
        }

    }
}


Consideraciones:
Es importante manejar las excepciones IOException que pueden ocurrir al trabajar con archivos y directorios.
Las rutas de acceso pueden ser absolutas (comenzando desde la raíz del sistema de archivos) o relativas (relativas al directorio de trabajo actual).
La clase File no proporciona métodos para leer o escribir el contenido de los archivos. Para eso, se utilizan otras clases como FileInputStream, FileOutputStream, BufferedReader y BufferedWriter.
Para operaciones más complejas, considera usar la API java.nio.file, que ofrece funcionalidades más avanzadas.

